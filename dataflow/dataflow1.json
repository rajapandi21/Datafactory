{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          Education as string,",
				"          JoiningYear as string,",
				"          City as string,",
				"          PaymentTier as string,",
				"          Age as string,",
				"          Gender as string,",
				"          EverBenched as string,",
				"          ExperienceInCurrentDomain as string,",
				"          LeaveOrNot as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:[($file2)],",
				"     partitionBy('hash', 1)) ~> source1",
				"source(output(",
				"          Education as string,",
				"          JoiningYear as string,",
				"          City as string,",
				"          PaymentTier as string,",
				"          Age as string,",
				"          Gender as string,",
				"          EverBenched as string,",
				"          ExperienceInCurrentDomain as string,",
				"          LeaveOrNot as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:[($file1)]) ~> source2",
				"source1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Education as string,",
				"          JoiningYear as string,",
				"          City as string,",
				"          PaymentTier as string,",
				"          Age as string,",
				"          Gender as string,",
				"          EverBenched as string,",
				"          ExperienceInCurrentDomain as string,",
				"          LeaveOrNot as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"source2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Education as string,",
				"          JoiningYear as string,",
				"          City as string,",
				"          PaymentTier as string,",
				"          Age as string,",
				"          Gender as string,",
				"          EverBenched as string,",
				"          ExperienceInCurrentDomain as string,",
				"          LeaveOrNot as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}